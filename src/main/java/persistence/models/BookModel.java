package persistence.models;

/*
  This file was generated by generate_model.py
  Any changes you will make to it will be lost if you run the
  script again.
 
  DO NOT MODIFY!
 */

import domain.Book;
import domain.Author;
import persistence.models.AuthorModel;
import domain.Shelve;
import persistence.models.ShelveModel;


import lombok.Data;
import lombok.NonNull;
import persistence.base.MappableModel;
import persistence.base.relations.RelatedField;
import persistence.base.relations.RelationType;
import persistence.base.serialization.Field;
import persistence.base.serialization.FieldType;
import persistence.base.serialization.FieldsMap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.stream.Collectors;

@Data
public class BookModel implements MappableModel<Book> {
    private final String name = "Book";

    private Integer id;
    @NonNull
    private Book data;

    public BookModel(Book data) {
        this.data = data;
    }

    public void setData(@NonNull Book data) {
        this.data = data;
    }

    @Override
    public FieldsMap map() {
        var map = new HashMap<String, Field>();
        if (this.id != null) {
            map.put("id", new Field("id", FieldType.Integer, this.id.toString()));
        }
        map.put("name", new Field("name", FieldType.String, this.data.getName().toString()));
        map.put("ISBN", new Field("ISBN", FieldType.String, this.data.getISBN().toString()));
        map.put("publishedAt", new Field("publishedAt", FieldType.String, this.data.getPublishedAt().toString()));
        map.put("available", new Field("available", FieldType.Boolean, this.data.getAvailable().toString()));
        map.put("borrowerName", new Field("borrowerName", FieldType.String, this.data.getBorrowerName().toString()));
        map.put("authorName", new Field("authorName", FieldType.String, this.data.getAuthorName().toString()));
        map.put("shelveName", new Field("shelveName", FieldType.String, this.data.getShelveName().toString()));
        map.put("pages", new Field("pages", FieldType.Integer, this.data.getPages().toString()));

        return new FieldsMap(map, "Book");
    }

    @Override
    public Book unmap(FieldsMap map) {
        assert map.getName().equals("Book");
        var name = map.getMap().get("name").getValue();
        var ISBN = map.getMap().get("ISBN").getValue();
        var publishedAt = map.getMap().get("publishedAt").getValue();
        var available = Boolean.valueOf(map.getMap().get("available").getValue());
        var borrowerName = map.getMap().get("borrowerName").getValue();
        var authorName = map.getMap().get("authorName").getValue();
        var shelveName = map.getMap().get("shelveName").getValue();
        var pages = Integer.valueOf(map.getMap().get("pages").getValue());
        try {
            this.data = new Book(name, ISBN, publishedAt, available, borrowerName, authorName, shelveName, pages);
        } catch (Exception ignored) {
            this.data = null;
        }

        var id = map.getMap().get("id");
        if (id != null) {
            this.id = Integer.valueOf(id.getValue());
        }
        return this.data;
    }

    @Override
    public Book unmapIfSet(Book exitingData, FieldsMap map) {
        assert map.getName().equals("Book");
        if (!map.getMap().containsKey("name")) { map.getMap().put("name", new Field("name", FieldType.String, exitingData.getName().toString())); }
        if (!map.getMap().containsKey("ISBN")) { map.getMap().put("ISBN", new Field("ISBN", FieldType.String, exitingData.getISBN().toString())); }
        if (!map.getMap().containsKey("publishedAt")) { map.getMap().put("publishedAt", new Field("publishedAt", FieldType.String, exitingData.getPublishedAt().toString())); }
        if (!map.getMap().containsKey("available")) { map.getMap().put("available", new Field("available", FieldType.Boolean, exitingData.getAvailable().toString())); }
        if (!map.getMap().containsKey("borrowerName")) { map.getMap().put("borrowerName", new Field("borrowerName", FieldType.String, exitingData.getBorrowerName().toString())); }
        if (!map.getMap().containsKey("authorName")) { map.getMap().put("authorName", new Field("authorName", FieldType.String, exitingData.getAuthorName().toString())); }
        if (!map.getMap().containsKey("shelveName")) { map.getMap().put("shelveName", new Field("shelveName", FieldType.String, exitingData.getShelveName().toString())); }
        if (!map.getMap().containsKey("pages")) { map.getMap().put("pages", new Field("pages", FieldType.Integer, exitingData.getPages().toString())); }

        return this.unmap(map);
    }

    @Override
    public Collection<Field> getFields() {
        var fields = new ArrayList<Field>();
        fields.add(new Field("id", FieldType.Integer));
        fields.add(new Field("name", FieldType.String));
        fields.add(new Field("ISBN", FieldType.String));
        fields.add(new Field("publishedAt", FieldType.String));
        fields.add(new Field("available", FieldType.Boolean));
        fields.add(new Field("borrowerName", FieldType.String));
        fields.add(new Field("authorName", FieldType.String));
        fields.add(new Field("author", FieldType.Reference));
        fields.add(new Field("shelveName", FieldType.String));
        fields.add(new Field("shelve", FieldType.Reference));
        fields.add(new Field("pages", FieldType.Integer));

        return fields;
    }

    @Override
    public void loadRelationField(String field, Object object) {
        if ("author".equals(field)){         this.getData().setAuthor((Author) object); }
        if ("shelve".equals(field)){         this.getData().setShelve((Shelve) object); }

    }

    @Override
    public RelatedField[] getRelatedFields() {
        return new RelatedField[]{
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "Author",
                "name",
                new Field("books", FieldType.Reference),
                "Book",
                "authorName",
                new Field("author", FieldType.Reference)
            ),
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "Shelve",
                "name",
                new Field("books", FieldType.Reference),
                "Book",
                "shelveName",
                new Field("shelve", FieldType.Reference)
            ),
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "Book",
                "name",
                new Field("trackers", FieldType.Reference),
                "ReadingTracker",
                "bookName",
                new Field("book", FieldType.Reference)
            ),
        };
    }
}