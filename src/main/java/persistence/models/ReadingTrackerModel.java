package persistence.models;

/*
  This file was generated by generate_model.py
  Any changes you will make to it will be lost if you run the
  script again.
 
  DO NOT MODIFY!
 */

import domain.ReadingTracker;
import domain.Book;
import persistence.models.BookModel;


import lombok.Data;
import lombok.NonNull;
import persistence.base.MappableModel;
import persistence.base.relations.RelatedField;
import persistence.base.relations.RelationType;
import persistence.base.serialization.Field;
import persistence.base.serialization.FieldType;
import persistence.base.serialization.FieldsMap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.stream.Collectors;

@Data
public class ReadingTrackerModel implements MappableModel<ReadingTracker> {
    private final String name = "ReadingTracker";

    private Integer id;
    @NonNull
    private ReadingTracker data;

    public ReadingTrackerModel(ReadingTracker data) {
        this.data = data;
    }

    public void setData(@NonNull ReadingTracker data) {
        this.data = data;
    }

    @Override
    public FieldsMap map() {
        var map = new HashMap<String, Field>();
        if (this.id != null) {
            map.put("id", new Field("id", FieldType.Integer, this.id.toString()));
        }
        map.put("started", new Field("started", FieldType.Boolean, this.data.getStarted().toString()));
        map.put("finished", new Field("finished", FieldType.Boolean, this.data.getFinished().toString()));
        map.put("page", new Field("page", FieldType.Integer, this.data.getPage().toString()));
        map.put("userName", new Field("userName", FieldType.String, this.data.getUserName().toString()));
        map.put("bookName", new Field("bookName", FieldType.String, this.data.getBookName().toString()));

        return new FieldsMap(map, "ReadingTracker");
    }

    @Override
    public ReadingTracker unmap(FieldsMap map) {
        assert map.getName().equals("ReadingTracker");
        var started = Boolean.valueOf(map.getMap().get("started").getValue());
        var finished = Boolean.valueOf(map.getMap().get("finished").getValue());
        var page = Integer.valueOf(map.getMap().get("page").getValue());
        var userName = map.getMap().get("userName").getValue();
        var bookName = map.getMap().get("bookName").getValue();
        try {
            this.data = new ReadingTracker(started, finished, page, userName, bookName);
        } catch (Exception ignored) {
            this.data = null;
        }

        var id = map.getMap().get("id");
        if (id != null) {
            this.id = Integer.valueOf(id.getValue());
        }
        return this.data;
    }

    @Override
    public ReadingTracker unmapIfSet(ReadingTracker exitingData, FieldsMap map) {
        assert map.getName().equals("ReadingTracker");
        if (!map.getMap().containsKey("started")) { map.getMap().put("started", new Field("started", FieldType.Boolean, exitingData.getStarted().toString())); }
        if (!map.getMap().containsKey("finished")) { map.getMap().put("finished", new Field("finished", FieldType.Boolean, exitingData.getFinished().toString())); }
        if (!map.getMap().containsKey("page")) { map.getMap().put("page", new Field("page", FieldType.Integer, exitingData.getPage().toString())); }
        if (!map.getMap().containsKey("userName")) { map.getMap().put("userName", new Field("userName", FieldType.String, exitingData.getUserName().toString())); }
        if (!map.getMap().containsKey("bookName")) { map.getMap().put("bookName", new Field("bookName", FieldType.String, exitingData.getBookName().toString())); }

        return this.unmap(map);
    }

    @Override
    public Collection<Field> getFields() {
        var fields = new ArrayList<Field>();
        fields.add(new Field("id", FieldType.Integer));
        fields.add(new Field("started", FieldType.Boolean));
        fields.add(new Field("finished", FieldType.Boolean));
        fields.add(new Field("page", FieldType.Integer));
        fields.add(new Field("userName", FieldType.String));
        fields.add(new Field("bookName", FieldType.String));
        fields.add(new Field("book", FieldType.Reference));

        return fields;
    }

    @Override
    public void loadRelationField(String field, Object object) {
        if ("book".equals(field)){         this.getData().setBook((Book) object); }

    }

    @Override
    public RelatedField[] getRelatedFields() {
        return new RelatedField[]{
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "Book",
                "name",
                new Field("trackers", FieldType.Reference),
                "ReadingTracker",
                "bookName",
                new Field("book", FieldType.Reference)
            ),
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "User",
                "name",
                new Field("trackers", FieldType.Reference),
                "ReadingTracker",
                "userName",
                new Field("user", FieldType.Reference)
            ),
        };
    }
}