package persistence.models;

/*
  This file was generated by generate_model.py
  Any changes you will make to it will be lost if you run the
  script again.
 
  DO NOT MODIFY!
 */

import domain.Review;
import domain.Book;
import persistence.models.BookModel;
import domain.User;
import persistence.models.UserModel;
import domain.Comment;
import persistence.models.CommentModel;


import lombok.Data;
import lombok.NonNull;
import persistence.base.MappableModel;
import persistence.base.relations.RelatedField;
import persistence.base.relations.RelationType;
import persistence.base.serialization.Field;
import persistence.base.serialization.FieldType;
import persistence.base.serialization.FieldsMap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.stream.Collectors;

@Data
public class ReviewModel implements MappableModel<Review> {
    private final String name = "Review";

    private Integer id;
    @NonNull
    private Review data;

    public ReviewModel(Review data) {
        this.data = data;
    }

    public void setData(@NonNull Review data) {
        this.data = data;
    }

    @Override
    public FieldsMap map() {
        var map = new HashMap<String, Field>();
        if (this.id != null) {
            map.put("id", new Field("id", FieldType.Integer, this.id.toString()));
        }
        map.put("rating", new Field("rating", FieldType.Integer, this.data.getRating().toString()));
        map.put("text", new Field("text", FieldType.String, this.data.getText().toString()));
        map.put("bookName", new Field("bookName", FieldType.String, this.data.getBookName().toString()));
        map.put("userName", new Field("userName", FieldType.String, this.data.getUserName().toString()));

        return new FieldsMap(map, "Review");
    }

    @Override
    public Review unmap(FieldsMap map) {
        assert map.getName().equals("Review");
        var rating = Integer.valueOf(map.getMap().get("rating").getValue());
        var text = map.getMap().get("text").getValue();
        var bookName = map.getMap().get("bookName").getValue();
        var userName = map.getMap().get("userName").getValue();
        try {
            this.data = new Review(rating, text, bookName, userName);
        } catch (Exception ignored) {
            this.data = null;
        }

        var id = map.getMap().get("id");
        if (id != null) {
            this.id = Integer.valueOf(id.getValue());
        }
        return this.data;
    }

    @Override
    public Review unmapIfSet(Review exitingData, FieldsMap map) {
        assert map.getName().equals("Review");
        if (!map.getMap().containsKey("rating")) { map.getMap().put("rating", new Field("rating", FieldType.Integer, exitingData.getRating().toString())); }
        if (!map.getMap().containsKey("text")) { map.getMap().put("text", new Field("text", FieldType.String, exitingData.getText().toString())); }
        if (!map.getMap().containsKey("bookName")) { map.getMap().put("bookName", new Field("bookName", FieldType.String, exitingData.getBookName().toString())); }
        if (!map.getMap().containsKey("userName")) { map.getMap().put("userName", new Field("userName", FieldType.String, exitingData.getUserName().toString())); }

        return this.unmap(map);
    }

    @Override
    public Collection<Field> getFields() {
        var fields = new ArrayList<Field>();
        fields.add(new Field("id", FieldType.Integer));
        fields.add(new Field("rating", FieldType.Integer));
        fields.add(new Field("text", FieldType.String));
        fields.add(new Field("bookName", FieldType.String));
        fields.add(new Field("book", FieldType.Reference));
        fields.add(new Field("userName", FieldType.String));
        fields.add(new Field("user", FieldType.Reference));
        fields.add(new Field("comments", FieldType.Reference));

        return fields;
    }

    @Override
    public void loadRelationField(String field, Object object) {
        if ("book".equals(field)){         this.getData().setBook((Book) object); }
        if ("user".equals(field)){         this.getData().setUser((User) object); }
        if ("comments".equals(field)){ 
            var entities = (Collection<CommentModel>) object; 
            var data = this.data.getComments();
            if (!data.isEmpty()) {
                data.clear();
            } 
            data.addAll(entities.stream().map(entity -> entity.getData()).collect(Collectors.toList()));
         }

    }

    @Override
    public RelatedField[] getRelatedFields() {
        return new RelatedField[]{
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "Book",
                "name",
                new Field("reviews", FieldType.Reference),
                "Review",
                "bookName",
                new Field("book", FieldType.Reference)
            ),
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "User",
                "name",
                new Field("reviews", FieldType.Reference),
                "Review",
                "userName",
                new Field("user", FieldType.Reference)
            ),
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "Review",
                "id",
                new Field("comments", FieldType.Reference),
                "Comment",
                "reviewId",
                new Field("review", FieldType.Reference)
            ),
        };
    }
}