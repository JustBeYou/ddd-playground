package persistence.models;

/*
  This file was generated by generate_model.py
  Any changes you will make to it will be lost if you run the
  script again.
 
  DO NOT MODIFY!
 */

import domain.Right;
import domain.RightType;


import lombok.Data;
import lombok.NonNull;
import persistence.base.MappableModel;
import persistence.base.relations.RelatedField;
import persistence.base.relations.RelationType;
import persistence.base.serialization.Field;
import persistence.base.serialization.FieldType;
import persistence.base.serialization.FieldsMap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.stream.Collectors;

@Data
public class RightModel implements MappableModel<Right> {
    private final String name = "Right";

    private Integer id;
    @NonNull
    private Right data;

    public RightModel(Right data) {
        this.data = data;
    }

    public void setData(@NonNull Right data) {
        this.data = data;
    }

    @Override
    public FieldsMap map() {
        var map = new HashMap<String, Field>();
        if (this.id != null) {
            map.put("id", new Field("id", FieldType.Integer, this.id.toString()));
        }
        map.put("type", new Field("type", FieldType.String, this.data.getType().toString()));
        map.put("userName", new Field("userName", FieldType.String, this.data.getUserName().toString()));

        return new FieldsMap(map, "Right");
    }

    @Override
    public Right unmap(FieldsMap map) {
        assert map.getName().equals("Right");
        var type = RightType.valueOf(map.getMap().get("type").getValue());
        var userName = map.getMap().get("userName").getValue();
        this.data = new Right(type, userName);
        var id = map.getMap().get("id");
        if (id != null) {
            this.id = Integer.valueOf(id.getValue());
        }
        return this.data;
    }

    @Override
    public Right unmapIfSet(Right exitingData, FieldsMap map) {
        assert map.getName().equals("Right");
        if (!map.getMap().containsKey("type")) { map.getMap().put("type", new Field("type", FieldType.String, exitingData.getType().toString())); }
        if (!map.getMap().containsKey("userName")) { map.getMap().put("userName", new Field("userName", FieldType.String, exitingData.getUserName().toString())); }

        return this.unmap(map);
    }

    @Override
    public Collection<Field> getFields() {
        var fields = new ArrayList<Field>();
        fields.add(new Field("id", FieldType.Integer));
        fields.add(new Field("type", FieldType.String));
        fields.add(new Field("userName", FieldType.String));

        return fields;
    }

    @Override
    public void loadRelationField(String field, Object object) {

    }

    @Override
    public RelatedField[] getRelatedFields() {
        return new RelatedField[]{
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "Author",
                "name",
                new Field("books", FieldType.Reference),
                "Book",
                "authorName",
                new Field("author", FieldType.Reference)
            ),
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "User",
                "name",
                new Field("rights", FieldType.Reference),
                "Right",
                "userName",
                new Field("user", FieldType.Reference)
            ),
        };
    }
}