package persistence.models;

/*
  This file was generated by generate_model.py
  Any changes you will make to it will be lost if you run the
  script again.
 
  DO NOT MODIFY!
 */

import domain.User;
import domain.Right;
import persistence.models.RightModel;


import lombok.Data;
import lombok.NonNull;
import persistence.base.MappableModel;
import persistence.base.relations.RelatedField;
import persistence.base.relations.RelationType;
import persistence.base.serialization.Field;
import persistence.base.serialization.FieldType;
import persistence.base.serialization.FieldsMap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.stream.Collectors;

@Data
public class UserModel implements MappableModel<User> {
    private final String name = "User";

    private Integer id;
    @NonNull
    private User data;

    public UserModel(User data) {
        this.data = data;
    }

    public void setData(@NonNull User data) {
        this.data = data;
    }

    @Override
    public FieldsMap map() {
        var map = new HashMap<String, Field>();
        if (this.id != null) {
            map.put("id", new Field("id", FieldType.Integer, this.id.toString()));
        }
        map.put("name", new Field("name", FieldType.String, this.data.getName().toString()));
        map.put("passwordHash", new Field("passwordHash", FieldType.String, this.data.getPasswordHash().toString()));
        map.put("email", new Field("email", FieldType.String, this.data.getEmail().toString()));

        return new FieldsMap(map, "User");
    }

    @Override
    public User unmap(FieldsMap map) {
        assert map.getName().equals("User");
        var name = map.getMap().get("name").getValue();
        var passwordHash = map.getMap().get("passwordHash").getValue();
        var email = map.getMap().get("email").getValue();
        this.data = new User(name, passwordHash, email);
        var id = map.getMap().get("id");
        if (id != null) {
            this.id = Integer.valueOf(id.getValue());
        }
        return this.data;
    }

    @Override
    public User unmapIfSet(User exitingData, FieldsMap map) {
        assert map.getName().equals("User");
        if (!map.getMap().containsKey("name")) { map.getMap().put("name", new Field("name", FieldType.String, exitingData.getName().toString())); }
        if (!map.getMap().containsKey("passwordHash")) { map.getMap().put("passwordHash", new Field("passwordHash", FieldType.String, exitingData.getPasswordHash().toString())); }
        if (!map.getMap().containsKey("email")) { map.getMap().put("email", new Field("email", FieldType.String, exitingData.getEmail().toString())); }

        return this.unmap(map);
    }

    @Override
    public Collection<Field> getFields() {
        var fields = new ArrayList<Field>();
        fields.add(new Field("id", FieldType.Integer));
        fields.add(new Field("name", FieldType.String));
        fields.add(new Field("passwordHash", FieldType.String));
        fields.add(new Field("email", FieldType.String));
        fields.add(new Field("rights", FieldType.Reference));

        return fields;
    }

    @Override
    public void loadRelationField(String field, Object object) {
        if ("rights".equals(field)){ 
            var entities = (Collection<RightModel>) object; 
            var data = this.data.getRights();
            if (!data.isEmpty()) {
                data.clear();
            } 
            data.addAll(entities.stream().map(entity -> entity.getData()).collect(Collectors.toList()));
         }

    }

    @Override
    public RelatedField[] getRelatedFields() {
        return new RelatedField[]{
            new RelatedField(
                RelationType.ONE_OWNS_MANY,
                "Author",
                "name",
                new Field("books", FieldType.Reference),
                "Book",
                "authorName",
                new Field("author", FieldType.Reference)
            ),
        };
    }
}